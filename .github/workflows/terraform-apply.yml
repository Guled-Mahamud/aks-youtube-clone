name: Terraform Apply Infrastructure

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: [ 'terraform/**' ]

permissions:
  id-token: write
  contents: read

env:
  TF_IN_AUTOMATION: "true"
  ARM_CLIENT_ID:       ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET:   ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID:       ${{ secrets.ARM_TENANT_ID }}

jobs:
  apply:
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (SP via JSON)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context (creates kubeconfig)
        id: aks
        uses: azure/aks-set-context@v4
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: youtube-aks
          resource-group: youtube-aks-rg

      - name: Export kubeconfig path
        run: echo "KUBECONFIG=${{ steps.aks.outputs.kubeconfig }}" >> $GITHUB_ENV

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      # ---- NEW: temporarily allow the runner public IP if IP ranges are enabled
      - name: Allow runner IP to AKS API if restricted
        id: allowip
        shell: bash
        run: |
          set -euo pipefail
          RUNNER_IP=$(curl -s https://api.ipify.org)
          echo "runner_ip=$RUNNER_IP" >> $GITHUB_OUTPUT
          echo "Runner public IP: $RUNNER_IP"

          # Check if API is IP-restricted
          CURRENT=$(az aks show -g youtube-aks-rg -n youtube-aks \
            --query 'apiServerAccessProfile.authorizedIpRanges' -o tsv || true)

          if [ -n "$CURRENT" ] && [ "$CURRENT" != "None" ]; then
            echo "AKS has authorizedIpRanges: $CURRENT"
            # Append our IP if not present
            if echo "$CURRENT" | grep -q "$RUNNER_IP/32"; then
              echo "Runner IP already present."
              echo "changed=false" >> $GITHUB_OUTPUT
            else
              NEW="$CURRENT,$RUNNER_IP/32"
              az aks update -g youtube-aks-rg -n youtube-aks \
                --api-server-authorized-ip-ranges "$NEW"
              echo "Temporarily added $RUNNER_IP/32"
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "prev_list=$CURRENT" >> $GITHUB_OUTPUT
            fi
          else
            echo "AKS API not IP-restricted (no authorizedIpRanges)."
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      # ---- Longer, more informative wait
      - name: Wait for Kubernetes API (up to ~10m)
        shell: bash
        run: |
          set -euo pipefail
          echo "Using kubeconfig: $KUBECONFIG"
          kubectl version --client=true
          for i in {1..120}; do
            if kubectl get --request-timeout=5s ns >/dev/null 2>&1; then
              echo "Kubernetes API is reachable."
              exit 0
            fi
            echo "Waiting for Kubernetes API... ($i/120)"
            sleep 5
          done
          echo "Kubernetes API was not reachable in time."
          kubectl cluster-info || true
          exit 1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.0

      - name: Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            terraform/.terraform
          key: tf-${{ runner.os }}-${{ hashFiles('terraform/.terraform.lock.hcl') }}

      - name: Terraform Init (remote backend)
        env:
          TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
        run: |
          terraform init -reconfigure -upgrade \
            -backend-config="resource_group_name=${{ secrets.RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ secrets.STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ secrets.CONTAINER_NAME }}" \
            -backend-config="key=${{ secrets.TFSTATE_KEY }}" \
            -input=false

      - name: Terraform Validate
        run: terraform validate

      # (keep your import step here if you still need it)

      - name: Terraform Apply
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}
          TF_VAR_client_id:       ${{ secrets.ARM_CLIENT_ID }}
          TF_VAR_client_secret:   ${{ secrets.ARM_CLIENT_SECRET }}
          TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          TF_VAR_tenant_id:       ${{ secrets.ARM_TENANT_ID }}
        run: terraform apply -input=false -auto-approve

      # ---- Cleanup: remove runner IP from allow-list if we added it
      - name: Remove runner IP from AKS API allow-list
        if: always() && steps.allowip.outputs.changed == 'true'
        shell: bash
        run: |
          set -euo pipefail
          PREV="${{ steps.allowip.outputs.prev_list }}"
          echo "Restoring original authorizedIpRanges: $PREV"
          az aks update -g youtube-aks-rg -n youtube-aks \
            --api-server-authorized-ip-ranges "$PREV"
