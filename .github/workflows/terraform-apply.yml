jobs:
  apply:
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (SP via JSON)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # ensure ~/.kube/config exists so k8s/helm providers don’t default to localhost
      - name: Set AKS context (creates kubeconfig)
        uses: azure/aks-set-context@v4
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: youtube-aks
          resource-group: youtube-aks-rg

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.0

      - name: Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            terraform/.terraform
          key: tf-${{ runner.os }}-${{ hashFiles('terraform/.terraform.lock.hcl') }}

      - name: Terraform Init (remote backend)
        env:
          TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
        run: |
          terraform init -reconfigure -upgrade \
            -backend-config="resource_group_name=${{ secrets.RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ secrets.STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ secrets.CONTAINER_NAME }}" \
            -backend-config="key=${{ secrets.TFSTATE_KEY }}" \
            -input=false

      - name: Terraform Validate
        run: terraform validate

      # ---------- ONE-TIME (idempotent) IMPORTS ----------
      - name: Import existing Azure resources into state (idempotent)
        env:
          SUB: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        shell: bash
        run: |
          set -e

          # helper: import only if not already in state
          ensure_import () {
            ADDR="$1"
            ID="$2"
            if terraform state show "$ADDR" >/dev/null 2>&1; then
              echo "✓ already in state: $ADDR"
            else
              echo "→ importing: $ADDR"
              terraform import "$ADDR" "$ID"
            fi
          }

          # resource group
          ensure_import azurerm_resource_group.rg \
            "/subscriptions/$SUB/resourceGroups/youtube-aks-rg"

          # ACR
          ensure_import module.acr.azurerm_container_registry.acr \
            "/subscriptions/$SUB/resourceGroups/youtube-aks-rg/providers/Microsoft.ContainerRegistry/registries/youtubeclone"

          # User-assigned managed identity (UAMI)
          ensure_import module.aks.azurerm_user_assigned_identity.uami \
            "/subscriptions/$SUB/resourceGroups/youtube-aks-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/youtube-aks-uami"

          # Virtual network
          ensure_import module.network.azurerm_virtual_network.vnet \
            "/subscriptions/$SUB/resourceGroups/youtube-aks-rg/providers/Microsoft.Network/virtualNetworks/youtube-vnet"

          # Subnet (import this too if you created it already)
          ensure_import module.network.azurerm_subnet.aks_subnet \
            "/subscriptions/$SUB/resourceGroups/youtube-aks-rg/providers/Microsoft.Network/virtualNetworks/youtube-vnet/subnets/aks-subnet"

      # ---------- APPLY ----------
      - name: Terraform Apply
        env:
          TF_VAR_client_id:       ${{ secrets.ARM_CLIENT_ID }}
          TF_VAR_client_secret:   ${{ secrets.ARM_CLIENT_SECRET }}
          TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          TF_VAR_tenant_id:       ${{ secrets.ARM_TENANT_ID }}
        run: terraform apply -input=false -auto-approve
